// file: AuctionOntology.java generated by ontology bean generator.  DO NOT EDIT, UNLESS YOU ARE REALLY SURE WHAT YOU ARE DOING!
package cout970.ontology;

import jade.content.onto.*;
import jade.content.schema.*;

/**
 * file: AuctionOntology.java
 *
 * @author OntologyBeanGenerator v4.1
 * @version 2017/05/15, 12:25:40
 */
public class AuctionOntology extends jade.content.onto.Ontology {

    private static final long serialVersionUID = 4303229723352589834L;

    //NAME
    public static final String ONTOLOGY_NAME = "Auction";
    // The singleton instance of this ontology
    private static Ontology theInstance = new AuctionOntology();

    public static Ontology getInstance() {
        return theInstance;
    }


    // VOCABULARY
    public static final String STARTAUCTION_BID = "bid";
    public static final String STARTAUCTION = "StartAuction";
    public static final String INCREASEPRICE_BID = "bid";
    public static final String INCREASEPRICE = "IncreasePrice";
    public static final String INFORMWINNER_BID = "bid";
    public static final String INFORMWINNER_WINNER = "winner";
    public static final String INFORMWINNER = "InformWinner";
    public static final String BIDUP_BID = "bid";
    public static final String BIDUP = "BidUp";
    public static final String BOOK_TITLE = "title";
    public static final String BOOK_ISBN = "ISBN";
    public static final String BOOK = "Book";
    public static final String BID_BOOK = "book";
    public static final String BID_PRICE = "price";
    public static final String BID = "Bid";

    /**
     * Constructor
     */
    private AuctionOntology() {
        super(ONTOLOGY_NAME, BasicOntology.getInstance());
        try {

            // adding Concept(s)
            ConceptSchema bidSchema = new ConceptSchema(BID);
            add(bidSchema, cout970.ontology.Bid.class);
            ConceptSchema bookSchema = new ConceptSchema(BOOK);
            add(bookSchema, cout970.ontology.Book.class);

            // adding AgentAction(s)
            AgentActionSchema bidUpSchema = new AgentActionSchema(BIDUP);
            add(bidUpSchema, cout970.ontology.BidUp.class);
            AgentActionSchema informWinnerSchema = new AgentActionSchema(INFORMWINNER);
            add(informWinnerSchema, cout970.ontology.InformWinner.class);
            AgentActionSchema increasePriceSchema = new AgentActionSchema(INCREASEPRICE);
            add(increasePriceSchema, cout970.ontology.IncreasePrice.class);
            AgentActionSchema startAuctionSchema = new AgentActionSchema(STARTAUCTION);
            add(startAuctionSchema, cout970.ontology.StartAuction.class);

            // adding AID(s)

            // adding Predicate(s)


            // adding fields
            bidSchema.add(BID_PRICE, (TermSchema) getSchema(BasicOntology.FLOAT), ObjectSchema.MANDATORY);
            bidSchema.add(BID_BOOK, bookSchema, ObjectSchema.MANDATORY);
            bookSchema.add(BOOK_ISBN, (TermSchema) getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
            bookSchema.add(BOOK_TITLE, (TermSchema) getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
            bidUpSchema.add(BIDUP_BID, bidSchema, ObjectSchema.OPTIONAL);
            informWinnerSchema.add(INFORMWINNER_WINNER, (ConceptSchema) getSchema(BasicOntology.AID), ObjectSchema.OPTIONAL);
            informWinnerSchema.add(INFORMWINNER_BID, bidSchema, ObjectSchema.OPTIONAL);
            increasePriceSchema.add(INCREASEPRICE_BID, bidSchema, ObjectSchema.OPTIONAL);
            startAuctionSchema.add(STARTAUCTION_BID, bidSchema, ObjectSchema.OPTIONAL);

            // adding name mappings

            // adding inheritance

        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }
    }
}
